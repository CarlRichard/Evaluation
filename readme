# Documentation de l'API

## Routes d'authentification

### `POST /auth/register`
Enregistre un nouvel utilisateur.
#### Corps de la requête :
```json
{
  "email": "exemple@example.com",
  "mot_de_passe": "motdepasse123"
}

Réponse :

{
  "id": 1,
  "email": "exemple@example.com"
}

POST /auth/login

Connecte un utilisateur et renvoie un accessToken.
Corps de la requête :

{
  "email": "exemple@example.com",
  "mot_de_passe": "motdepasse123"
}

Réponse :

{
  "accessToken": "jwt_access_token"
}

POST /auth/logout

Déconnecte l'utilisateur et supprime le refreshToken.
Réponse :

{
  "message": "You have been logged out"
}

GET /auth/authenticated

Vérifie si l'utilisateur est authentifié et renvoie un nouvel accessToken si un refreshToken valide est fourni.
Réponse :

{
  "connected": true,
  "accessToken": "jwt_access_token"
}

Routes des utilisateurs
POST /api/utilisateur

Crée un nouvel utilisateur.
Corps de la requête :

{
  "nom": "Nom",
  "prenom": "Prenom",
  "email": "exemple@example.com",
  "role": "ROLE_ADMIN",
  "formation": "Informatique",
  "mot_de_passe": "motdepasse123"
}

Réponse :

{
  "message": "Utilisateur créé avec succès",
  "utilisateur": {
    "id": 1,
    "nom": "Nom",
    "prenom": "Prenom",
    "email": "exemple@example.com"
  }
}

GET /api/utilisateur

Récupère tous les utilisateurs sans les mots de passe.
Réponse :

{
  "utilisateurs": [
    {
      "id": 1,
      "nom": "Nom",
      "prenom": "Prenom",
      "email": "exemple@example.com"
    }
  ]
}

GET /api/utilisateur/:id

Récupère un utilisateur par ID sans le mot de passe.
Réponse :

{
  "id": 1,
  "nom": "Nom",
  "prenom": "Prenom",
  "email": "exemple@example.com"
}

Routes des évaluations
POST /api/evaluation

Crée une évaluation pour un utilisateur.
Corps de la requête :

{
  "id_evalue": 2,
  "commentaire": "Évaluation de l'utilisateur.",
  "id_reponse": 3
}

Réponse :

{
  "message": "Évaluation créée avec succès",
  "evaluation": {
    "id": 1,
    "id_evaluateur": 1,
    "id_evalue": 2,
    "commentaire": "Évaluation de l'utilisateur.",
    "id_reponse": 3
  }
}

GET /api/evaluation

Récupère toutes les évaluations avec les informations des utilisateurs évaluateurs et évalués ainsi que les réponses associées.
Réponse :

{
  "evaluations": [
    {
      "id": 1,
      "evaluateur": {
        "id": 1,
        "nom": "Evaluateur",
        "prenom": "Prenom"
      },
      "evalue": {
        "id": 2,
        "nom": "Évalué",
        "prenom": "Prenom"
      },
      "reponse": {
        "id": 3,
        "rep": "Réponse"
      }
    }
  ]
}

GET /api/evaluation/:id

Récupère une évaluation par ID.
Réponse :

{
  "evaluation": {
    "id": 1,
    "evaluateur": {
      "id": 1,
      "nom": "Evaluateur",
      "prenom": "Prenom"
    },
    "evalue": {
      "id": 2,
      "nom": "Évalué",
      "prenom": "Prenom"
    },
    "reponse": {
      "id": 3,
      "rep": "Réponse"
    }
  }
}

PUT /api/evaluation/:id

Met à jour une évaluation.
Corps de la requête :

{
  "commentaire": "Nouveau commentaire."
}

Réponse :

{
  "message": "Évaluation mise à jour avec succès"
}

DELETE /api/evaluation/:id

Supprime une évaluation.
Réponse :

{
  "message": "Évaluation supprimée avec succès"
}

Routes des questions
POST /api/question

Crée une nouvelle question pour un questionnaire.
Corps de la requête :

{
  "titre": "Titre de la question",
  "description": "Description de la question",
  "id_questionnaire": 1
}

Réponse :

{
  "message": "Question créée avec succès",
  "question": {
    "id": 1,
    "titre": "Titre de la question",
    "description": "Description de la question"
  }
}

GET /api/question

Récupère toutes les questions.
Réponse :

{
  "questions": [
    {
      "id": 1,
      "titre": "Titre de la question",
      "description": "Description de la question"
    }
  ]
}

GET /api/question/:id

Récupère une question par ID.
Réponse :

{
  "question": {
    "id": 1,
    "titre": "Titre de la question",
    "description": "Description de la question"
  }
}

PUT /api/question/:id

Met à jour une question.
Corps de la requête :

{
  "titre": "Nouveau titre",
  "description": "Nouvelle description",
  "id_questionnaire": 2
}

Réponse :

{
  "message": "Question mise à jour avec succès"
}

DELETE /api/question/:id

Supprime une question.
Réponse :

{
  "message": "Question supprimée avec succès"
}

Routes des questionnaires
POST /api/questionnaire

Crée un nouveau questionnaire.
Corps de la requête :

{
  "titre": "Titre du questionnaire",
  "description": "Description du questionnaire"
}

Réponse :

{
  "message": "Questionnaire créé avec succès",
  "questionnaire": {
    "id": 1,
    "titre": "Titre du questionnaire",
    "description": "Description du questionnaire"
  }
}

GET /api/questionnaire

Récupère tous les questionnaires avec leurs questions et l'utilisateur qui les a créés.
Réponse :

{
  "questionnaires": [
    {
      "id": 1,
      "titre": "Titre du questionnaire",
      "description": "Description du questionnaire",
      "utilisateur": {
        "nom": "Utilisateur",
        "prenom": "Prenom",
        "email": "exemple@example.com"
      },
      "questions": [
        {
          "titre": "Titre de la question",
          "description": "Description de la question"
        }
      ]
    }
  ]
}

GET /api/questionnaire/:id

Récupère un questionnaire par ID.
Réponse :

{
  "questionnaire": {
    "id": 1,
    "titre": "Titre du questionnaire",
    "description": "Description du questionnaire",
    "utilisateur": {
      "nom": "Utilisateur",
      "prenom": "Prenom",
      "email": "exemple@example.com"
    },
    "questions": [
      {
        "titre": "Titre de la question",
        "description": "Description de la question"
      }
    ]
  }
}

PUT /api/questionnaire/:id

Met à jour un questionnaire.
Corps de la requête :

{
  "titre": "Nouveau titre",
  "description": "Nouvelle description"
}

Réponse :

{
  "message": "Questionnaire mis à jour avec succès"
}

DELETE /api/questionnaire/:id

Supprime un questionnaire.
Réponse :

{
  "message": "Questionnaire supprimé avec succès"
}

Routes des réponses
POST /api/reponse

Crée une nouvelle réponse.
Corps de la requête :

{
  "rep": "Réponse",
  "id_question": 1
}

Réponse :

{
  "message": "Réponse créée avec succès",
  "reponse": {
    "id": 1,
    "rep": "Réponse"
  }
}

GET /api/reponse

Récupère toutes les réponses.
Réponse :

{
  "reponses": [
    {
      "id": 1,
      "rep": "Réponse"
    }
  ]
}

GET /api/reponse/:id

Récupère une réponse par ID.
Réponse :

{
  "reponse": {
    "id": 1,
    "rep": "Réponse"
  }
}

PUT /api/reponse/:id

Met à jour une réponse.
Corps de la requête :

{
  "rep": "Nouvelle réponse"
}

Réponse :

{
  "message": "Réponse mise à jour avec succès"
}

DELETE /api/reponse/:id

Supprime une réponse.
Réponse :

{
  "message": "Réponse supprimée avec succès"
}


Cela couvre toutes les routes mentionnées dans vos demandes. Vous pouvez ajuster cette documentation en fonction de l'évolution de votre API et de la manière dont vous gérez les différentes entités dans votre projet.

